package{	import caurina.transitions.Tweener;		import com.greensock.TweenMax;	import com.greensock.easing.EaseLookup;	import com.greensock.easing.Elastic;	import com.greensock.easing.Linear;	import com.greensock.easing.Quad;	import com.greensock.plugins.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.filters.BitmapFilterQuality;	import flash.filters.BlurFilter;	import flash.filters.DropShadowFilter;	import flash.filters.GlowFilter;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.Timer;		import model.Model;		import org.flintparticles.twoD.renderers.PixelRenderer;		import utils.Utils;	import utils.CustomEvent;		import view.FinalFrameSprite;	import view.Frame1;	import view.buttons.ChoiceButton;	import view.clouds.*;	import utils.Tracer;		public dynamic class Animator extends Sprite	{		//const		public const RESTART_ME:String = "restartMe";		public const EB_ACTION:String = "ebAction";				//data		private var choices:Array;		private var currentQ:uint;		private var totalQuestions:uint;		private var theModel:Model;				//						SPRITES		//masks		private var sideEmitterMask:Sprite;		private var mainMask:Sprite;		private var pshopMask:Bitmap;				//bg sprites		private var bgBlue:Bitmap;		private var bgLeft:Bitmap;		private var bgRight:Bitmap;		private var bgFront:Bitmap;				private var questionHolder:Sprite;		private var smallBG:Bitmap;				private var sideEmittersHolder:Sprite;		private var holder:Sprite;		private var buttonsHolder:Sprite;		private var _hitArea:Sprite;						//////////////     LIBRARY SYMBOLS					private var choice1:ChoiceButton;		private var choice2:ChoiceButton;		private var or:Or;		private var lenorLogoRt:LenorLogoRt;		private var whatHeaven:WhatHeaven;		private var _finalFrame:FinalFrame;		private var catHotSpots:CatHotSpots;				private var currentClouds:Array;		private var bottomC:BottomCloud;		private var rolloverBtn:RolloverBtn;		private var frame1:Frame1;				private var heavenlyText:HeavenlyText;		private var luxuryBtn:LuxuryBtn;								////////    FILTERS				private var _dropFilter:DropShadowFilter;		private var _blurFilter:BlurFilter;				private var _bitmapMask:BitmapData;		private var _bitmapMasker:Bitmap;				/////// CUSTOM CLASSES				private var rollOverSmoke:RolloverSmoke;		private var batManager:BatManager;		private var cakeManager:CakeManager;		private var catManager:*;		private var currentAnimal:ShapeManager;		private var disappearingAnimal:ShapeManager;				private var currentHotSpots:*;				private var renderer:PixelRenderer;				private var sideEmitter1:SideEmitter;		private var sideEmitter2:SideEmitter;		private var sideEmitterLarge:SideEmitter;				private var bottomTween:TweenMax;				public var bannerW:Number;		public var bannerH:Number;		private var alternating:Boolean;		public var expanded:Boolean;				private var _animals:Array;				private var startTimer:Timer;		private var started:Boolean;		private var autoStart:Boolean;		private var tracer:Tracer;		private var stageTimer:Timer;						public function Animator(wi:Number, he:Number, altern:Boolean, autoStar:Boolean = true)		{			tracer = new Tracer();			addChild(tracer);			autoStart = autoStar;			bannerW = wi;			bannerH = he;			expanded = false;			if (bannerW==600){				expanded = true;			}			alternating = altern;			addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(t:Event = null):void{			started = false;			tracer.log("---->INIT IN expanded?"+expanded);			removeEventListener(Event.ADDED_TO_STAGE, init);			stage.scaleMode = StageScaleMode.NO_SCALE;			trace("---  INITIALISING");						startTimer = new Timer(1500, 1);						_animals = new Array();			currentClouds = new Array();						//INITIALISE DATA			if(expanded){				theModel = new Model();				currentQ = 0;				if (alternating){					totalQuestions = 2;					}else{					totalQuestions = 3;					}				initChoices();			}						//INITIALISE DISPLAY			initialiseDisplayObjects();			if (expanded){				createBottomCloud();			}						createSideEmitters();			initAnimals();						addLogo();						if(expanded){				if (alternating){					currentAnimal = batManager;				}else{					currentAnimal = catManager;				}			}else{				currentAnimal = catManager;			}						startTimer.addEventListener(TimerEvent.TIMER_COMPLETE, startNow);			if (autoStart){				tracer.log("STARTING AUTOSTART TIMER");				startTimer.start();			}			stage.addEventListener(MouseEvent.CLICK, stageClick);			stageTimer = new Timer(2000, 0);			stageTimer.addEventListener(TimerEvent.TIMER, stageTimerListener);		//	stageTimer.start();		}				private function stageTimerListener(t:TimerEvent):void		{			tracer.log("WH:"+stage.width+":"+stage.height);			tracer.log("StageWH:"+stage.stageHeight+":"+stage.stageWidth);		}					private function stageClick(e:Event):void {           var dispObj = e.target;           var a:Array = [];           while (dispObj.parent != null) {	               a.push(dispObj.name)	               dispObj = dispObj.parent           }           tracer.log("PATH:"+ a.reverse().join("."));		}								public function startNow(t:TimerEvent = null):void{			tracer.log("START NOW");			if (started){				restart();			}else{				trace("start now after timer");				if (expanded){					trace("************************************STARTING BIG BANNER");					addChild(currentAnimal);										initButtons();					showButtons(currentQ);					TweenMax.delayedCall(2, makeHotSpots);					placeBGElements();					tracer.log("ABOUT TO START CLOUDS MAIN");					currentAnimal.startCloudsMain();					showText();					started = true;				}else{					initSmallClouds();					started = true;				}			}					}						private function initSmallClouds():void{			tracer.log("INIT SMALL CLOUDS");			if (alternating){				catManager.y = -45;			}			currentAnimal = catManager;			if (!(catManager as CatManager).initialised){				holder.addChild(catManager);			}			catManager.addEventListener("initialised", catInitialised);			catManager.initSmallClouds();			}				private function showButton():void		{			rolloverBtn = new RolloverBtn();			rolloverBtn.y = 20;			rolloverBtn.alpha = 0;			holder.addChild(rolloverBtn);			TweenMax.to(rolloverBtn, .5, {alpha:1});		}						private function catInitialised(e:Event):void{			tracer.log("CAT INITIALISED");			trace(">>>>>>>>>>>>>>  cat initialised");			makeFrame1();			//showMainLogo();			showButton();		}				public function stop():void{			trace("stop");			tracer.log("-->     STOP  >>>>>");			startTimer.stop();			startTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, startNow);									if(!expanded){				frame1.stopIt();				frame1.removeEventListener("showCat", showCatList);				TweenMax.killDelayedCallsTo(finalFrame);				TweenMax.to(rolloverBtn, .5, {alpha:0});								if (heavenlyText) TweenMax.to(heavenlyText, .5, {alpha:0});				if (luxuryBtn) TweenMax.to(luxuryBtn, .5, {alpha:0});							}else{								try{					TweenMax.killTweensOf(choice1);					choice1.visible = false;				}catch(e:*){									}				try{					TweenMax.killTweensOf(choice2);					choice2.visible = false;					choice2.alpha = 0;					trace("setting choice to to false");				}catch(e:*){									}				if (or) {					TweenMax.killTweensOf(or);					or.alpha = 0;				}				if (whatHeaven){					TweenMax.killTweensOf(whatHeaven);					whatHeaven.alpha = 0;				}				TweenMax.killTweensOf(bottomC);				TweenMax.to(bottomC, .5, {alpha:0});				TweenMax.to(bgBlue, .5, {alpha:0});				if (_finalFrame){					TweenMax.to(_finalFrame, .5, {alpha:0});				}				if (rollOverSmoke) rollOverSmoke.stop();							}						sideEmitter1.stopEmitter();			sideEmitter2.stopEmitter();			stopAllAnimals();			mouseEnabled = false;		}				private function stopAllAnimals():void{			for (var i:uint = 0; i<_animals.length; i++){				(_animals[i] as ShapeManager).stop();			}		}						private function makeFrame1():void		{			tracer.log("MAKE FRAME1");			frame1 = new Frame1Mov();			frame1.initialise();			if (!started){				holder.addChild(frame1);			}			frame1.addEventListener("showCat", showCatList);		}				private function showCatList(e:Event):void{			tracer.log("> > > > > > > > > > > > > SHOW CAT LIST");			frame1.removeEventListener("showCat", showCatList);			catManager.startClouds(true);			TweenMax.delayedCall(6.5, finalFrame);			TweenMax.delayedCall(6, hideSmallWords);		}				private function hideSmallWords():void{			catManager.hideSmallWords();		}				public function restart():void{			trace("restart");			tracer.log("! restart");			if (!started){				startNow();			}else{				//set all clouds to the right				if (expanded){										TweenMax.to(choice1, 1, {autoAlpha:1, blurFilter:{blurX:0, blurY:0}});					TweenMax.to(choice2, 1, {autoAlpha:1, blurFilter:{blurX:0, blurY:0}});					TweenMax.to(or, 1, {autoAlpha:1});										TweenMax.to(whatHeaven, 1, {autoAlpha:1});					//TweenMax.killTweensOf(bottomC);					TweenMax.to(bottomC, 1, {alpha:1});					TweenMax.to(bgBlue, 2, {alpha:1});										bottomTween = new TweenMax(bottomC, 60, {x:-600, repeat:-1});					currentQ = 0;					if (alternating){						totalQuestions = 2;					}else{						totalQuestions = 3;					}															currentAnimal = null;					if(expanded){						if (alternating){							currentAnimal = batManager;						}else{							currentAnimal = catManager;						}					}else{						currentAnimal = catManager					}															holder.addChild(currentAnimal);					currentAnimal.startCloudsMain();					TweenMax.delayedCall(2, makeHotSpots);									}else{										frame1.restart();					frame1.addEventListener("showCat", showCatList);					//fade button in					TweenMax.to(rolloverBtn, .5, {alpha:1});				}								//side emitters				sideEmitter1.startEmitting();				sideEmitter2.startEmitting();				mouseEnabled = true;				if (expanded) showButtons(currentQ);												}					}						//sets up final frame of small banner		private function finalFrame():void		{			catManager.justHideClouds();			if (!heavenlyText) heavenlyText = new HeavenlyText();			heavenlyText.x = 52;			heavenlyText.y = 61;			heavenlyText.alpha = 0;			holder.addChild(heavenlyText);			TweenMax.to(heavenlyText, 2, {alpha:1});			if (!luxuryBtn) luxuryBtn = new LuxuryBtn();			luxuryBtn.x = 82;			luxuryBtn.y = 177;			luxuryBtn.alpha = 0;			holder.addChild(luxuryBtn);			TweenMax.to(luxuryBtn, 2, {alpha:1, delay:2});			TweenMax.to(rolloverBtn, .5, {alpha:0});		}						private function createBottomCloud():void{			trace("CREATE BOTTOM CLOUD*******");			bottomC = new BottomCloud();			bottomC.x = 600;			holder.addChild(bottomC);			bottomTween = new TweenMax(bottomC, 60, {x:-600, repeat:-1});		}				private function initChoices():void		{			choices = new Array();			var c1:Array = ["butterfly", "mittens"];			var c2:Array = ["cake", "beret"];			var c3:Array = ["icecream", "bouquet"];			choices = [c1, c2];			if (!alternating){				c1 = ["kitten", "cub"];				c2 = ["butterfly", "doves"];				c3 = ["icecream", "bouquet"];				choices = [c1, c2, c3];			}		}				private function showText():void{			whatHeaven = new WhatHeaven();			whatHeaven.name = "whatHeaven";			whatHeaven.x = 107;			whatHeaven.y = 50;			whatHeaven.alpha = 0;			holder.addChild(whatHeaven);			TweenMax.to(whatHeaven, 3, {alpha:1, delay:3.5});		}				private function addLogo():void{			trace("======add logo");			lenorLogoRt = new LenorLogoRt();			lenorLogoRt.x = bannerW - lenorLogoRt.width;		//	if (expanded)  lenorLogoRt.alpha = 0;			addChild(lenorLogoRt);		}				private function initAnimals():void{			tracer.log("INIT ANIMALS");			if(expanded){				if (alternating){					batManager = new BatManager(2, 2, "Bfly", this, alternating);					cakeManager = new CakeManager(2, 1, "Ck", this, alternating);					_animals.push(batManager);					_animals.push(cakeManager);				}else{					catManager = new NewCatManager(3, 0, "Cat", this, alternating);						batManager = new BatManager(5, 0, "Bats", this, alternating);					cakeManager = new CakeManager(8, 0, "Cake", this, alternating, false);					_animals.push(catManager);					_animals.push(batManager);					_animals.push(cakeManager);				}			}else{				if (alternating){					catManager = new CatManager(2, "Bfly", this, alternating);					_animals.push(catManager);				}else{					catManager = new CatManager(3, "Cat", this, alternating);					_animals.push(catManager);				}			}		}		private function initialiseDisplayObjects():void{			holder = new Sprite();			holder.name = "holder";			addChild(holder);			sideEmittersHolder = new Sprite();			sideEmittersHolder.name = "sideEmittersHolder";		}				private function initButtons():void{			trace("init buttons");			buttonsHolder = new Sprite();			buttonsHolder.name =  "buttonsHolder";			addChild(buttonsHolder);						choice1 = new AnimalButton();			choice2 = new AnimalButton();			choice1.x = 96;			choice1.y = 496;			choice2.x = 329;			choice2.y = 496;									buttonsHolder.addChild(choice1);			buttonsHolder.addChild(choice2);						this.name = "anim";			choice1.buttonMode = true;			choice1.useHandCursor = true;			choice1.mouseChildren = false;						choice2.buttonMode = true;			choice2.useHandCursor = true;			choice2.mouseChildren = false;							choice1.addEventListener(MouseEvent.CLICK, chosen);			choice2.addEventListener(MouseEvent.CLICK, chosen);					choice1.addEventListener(MouseEvent.MOUSE_OVER, mOver);			choice2.addEventListener(MouseEvent.MOUSE_OVER, mOver);				choice1.addEventListener(MouseEvent.MOUSE_OUT, mOut);			choice2.addEventListener(MouseEvent.MOUSE_OUT, mOut);			//add the 'or'			or = new Or();			or.x = 300- (or.width/2);			or.y = 493;			or.alpha = 0;			or.visible = false;			buttonsHolder.addChild(or);					mouseChildren = true;			mouseEnabled = true;		}		private function mOver(m:MouseEvent):void{			var choice:ChoiceButton = m.currentTarget as ChoiceButton;			choice.showRollover();		}		private function mOut(m:MouseEvent):void{			var choice:ChoiceButton = m.currentTarget as ChoiceButton;			choice.showRollOut();		}				private function chosen(m:MouseEvent):void{					var cB:ChoiceButton = m.currentTarget as ChoiceButton;			var d:uint = cB.data;			trace(">Selection made:"+d+" > > > > > > > > ");				theModel.submitAnswer(d, currentQ);					dispatchEvent(new CustomEvent(EB_ACTION, [d, currentQ]));				disappearingAnimal = currentAnimal;			disappearingAnimal.hideClouds();			hideButtons();					if(rollOverSmoke) rollOverSmoke.removeDisplayObject();			nextQuestion();		//	submitEBCustom(d, currentQ);				}							private function nextQuestion(e:Event = null):void{			if (currentQ<totalQuestions-1){								currentQ ++;								createNewAnimal();				showButtons(currentQ);				TweenMax.delayedCall(2, updateHotspots);			}else{				finalHide();				showFinalAnswer();			}		}							private function hideButtons():void{			TweenMax.to(choice1, .5, {blurFilter:{blurX:10, blurY:10}, autoAlpha:0, delay:.2});			TweenMax.to(or, .5, {blurFilter:{blurX:10, blurY:10}, autoAlpha:0, delay:.5});						TweenMax.to(choice2, .5, {blurFilter:{blurX:10, blurY:10}, autoAlpha:0, delay:1});		}				private function createNewAnimal():void{			currentAnimal = null;			switch(currentQ){				case 1:					if(alternating){						currentAnimal = cakeManager;					}else{						currentAnimal = batManager;					}					break				case 2:					currentAnimal = cakeManager;					break							}			currentAnimal.startCloudsMain();			holder.addChild(currentAnimal);						}				private function updateHotspots():void{			trace("update hotspots");			makeHotSpots();		}				public function finalHide():void{			//TweenMax.to(questionHolder, .5, {autoAlpha:0, blurFilter:{blurX:10, blurY:20}});			TweenMax.to(choice1, .5, {autoAlpha:0, blurFilter:{blurX:10, blurY:20}, delay:.2});			TweenMax.to(choice2, .5, {autoAlpha:0, blurFilter:{blurX:10, blurY:20, delay:.4}});					}				public function showFinalAnswer():void{						TweenMax.to(whatHeaven, 2, {alpha:0, delay:0});			TweenMax.to(lenorLogoRt, 2, {alpha:0, delay:0});						//request answer from model to know which to show			var res:uint = theModel.getResult();			_finalFrame = new FinalFrame();			addChild(_finalFrame);			_finalFrame.showResult(res);			trace("Final frame added");					}			private function createSideEmitters():void{			tracer.log("CREATE SIDE EMITTERS");			sideEmitter1 = new SideEmitter(60, 20, 3000);			var xVal:Number = 350;			if (expanded) xVal = 650;			sideEmitter1.x  = xVal;						sideEmitter1.y = 30;			sideEmittersHolder.addChild(sideEmitter1);			sideEmitter2 = new SideEmitter(60, 20, 1000);			sideEmitter2.x  = xVal;			sideEmitter2.y = 150;			if(expanded){				sideEmitter2.y = 300;			}			sideEmittersHolder.addChild(sideEmitter2);			_blurFilter = new BlurFilter(25, 8, BitmapFilterQuality.HIGH);			sideEmittersHolder.filters = [_blurFilter];			holder.addChildAt(sideEmittersHolder, 0);		}				private function drawMainMask():void{			mainMask = new Sprite();			mainMask.graphics.beginFill(0x25FF2D);			mainMask.graphics.drawRect(0,0,600,600);			addChild(mainMask);			holder.mask = mainMask;		}						//TODO add rollovers for diferent questions depending on if expanded/alternating		private function makeHotSpots():void{			trace("------------------->>>>>>>     makeHotSpots q:"+currentQ);			switch(currentQ){				case 0:					currentHotSpots = new CatHotSpots();					rollOverSmoke = new RolloverSmoke();									addChild(rollOverSmoke);				//	rollOverSmoke.alpha = 0;					break				case 1:					currentHotSpots = new BatHotSpots();				break				case 2:					currentHotSpots = new CakeHotSpots();				break							}						TweenMax.delayedCall(5, setNewHotSpots);		}								private function setNewHotSpots():void{			if (rollOverSmoke) rollOverSmoke.setDisplayObject(currentHotSpots);		}				private function removeRolloverSmoke():void{			if (rollOverSmoke != null){				rollOverSmoke.destroy();					}					try			{				removeChild(rollOverSmoke);				} 			catch (e:Error)			{							}		}				private function showButtons(n:uint):void{			trace("add buttons:"+n);				tracer.log("SHOW BUTTONS:"+n);			if (choice1==null){				initButtons();			}						choice1.addTitle(choices[n][0]);			choice2.addTitle(choices[n][1]);									choice1.addData(1);			choice2.addData(2);									choice1.alpha = 0;			choice1.visible = false;			choice2.alpha = 0;			choice2.visible = false;			or.alpha = 0;						TweenMax.to(choice1, 2, {blurFilter:{blurX:0, blurY:0}, autoAlpha:1, delay:1});			TweenMax.to(or, 2, {blurFilter:{blurX:0, blurY:0}, autoAlpha:1, delay:1.2});			TweenMax.to(choice2, 2, {blurFilter:{blurX:0, blurY:0}, autoAlpha:1, delay:1.5});					setTopDepth(choice1);			setTopDepth(choice2);			setTopDepth(lenorLogoRt);									choice1.removeEventListener(MouseEvent.CLICK, chosen);			choice2.removeEventListener(MouseEvent.CLICK, chosen);							choice1.addEventListener(MouseEvent.CLICK, chosen);			choice2.addEventListener(MouseEvent.CLICK, chosen);				choice1.name = "choice1";			choice1.name = "choice2";						setTopDepth(choice1);			setTopDepth(choice2);			setTopDepth(or);				}				private function setTopDepth(d:DisplayObject):void{			d.parent.setChildIndex(d, d.parent.numChildren-1);		}				private function placeBGElements():void{			trace("Place BG Elements");			bgBlue = Utils.returnBitmap(BGBlue);			bgBlue.alpha = .75;			bgLeft = Utils.returnBitmap(BGLeft);			bgRight = Utils.returnBitmap(BGRight);			bgFront = Utils.returnBitmap(BGFront);			bgBlue.alpha = 0;			bgLeft.alpha = 0;			bgRight.alpha = 0;			bgFront.alpha = 0;			bgFront.x = 600;		//	catManager.addBlueDropShadow(bgFront);			holder.addChildAt(bgBlue, 0);			//holder.addChildAt(bgLeft, 0);			//holder.addChildAt(bgRight, 0);			//holder.addChildAt(bgFront, 0);			startBGAnim();		}				private function startBGAnim():void{			trace("startBGAnim");			Tweener.addTween(bgBlue, {alpha:1, time:1, transition:"easeInOutQuad"});			Tweener.addTween(bgLeft, {alpha:1, time:.7, transition:"easeInOutQuad"});			Tweener.addTween(bgRight, {alpha:1, time:.7, transition:"easeInOutQuad", delay:3.3});			//TweenMax.to(bgFront, 50, {x:-600, ease:Linear.easeNone, repeat:-1, repeatDelay:5, delay:2});		}				private function setMainMaskSize(w:Number, h:Number):void{			trace("main mask revised:"+w+":"+h);			mainMask.graphics.clear();			mainMask.graphics.drawRect(0,0,w,w);			mainMask.alpha = 0;			if (w==600){				pshopMask = Utils.returnBitmap(PshopMask);				pshopMask.cacheAsBitmap = true;				addChild(pshopMask);				holder.mask = null;				holder.mask = pshopMask;				holder.cacheAsBitmap = true;			}else{				holder.mask = null;				removeChild(pshopMask);				hideButtons();			//	lenorLogoRt.alpha = 0;			}								}	}}